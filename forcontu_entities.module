<?php

/**
 * @file
 * Contains forcontu_entities.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function forcontu_entities_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the forcontu_entities module.
    case 'help.page.forcontu_entities':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Forcontu Entities Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_load() for node entities.
 */
function forcontu_entities_node_load($nodes) {
  
  foreach ($nodes as $node) {
    
    if ($node->bundle() == 'article') {
      $title = $node->get('title')->getValue();
      // Mostramos sufijo "Article: "
      $node->set('title', t('Article: ') . $title[0]['value']);
      
    }
  }
}

/**
* Implements ENTITY_TYPE_insert() for user.
*/
function forcontu_entities_user_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  
  $fipsum = \Drupal::service('plugin.manager.fipsum')->createInstance('lorem_ipsum');
  
  $node = $node_storage->create([
    'uid' => $entity->id(),
    'type' => 'page',
    'title' => 'Presentación de ' . $entity->getUsername(),
    'body' => $fipsum->generate(600)
  ]);
  $node->save();
  
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user.
 */
function forcontu_entities_user_predelete(Drupal\user\Entity\User $user) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $nodes_user = $node_storage->loadByProperties(['uid' => $user->id()]);
  $node_storage->delete($nodes_user);
  drupal_set_message('Eliminado el contenido del usuario ' . $user->getUsername());
}

/**
 * Implements MODULE_preprocess_HOOK()
 */
function forcontu_entities_preprocess_page_title(&$variables) {
  // obtener ruta actual
  $uri = \Drupal::request()->getRequestUri();
  //dpm($uri);
  
  // obtener secciones
  $sections = \Drupal::entityQuery('forcontu_entities_section')->execute();
  //dpm($sections);
  
  // Obtener storage de las secciones
  $section_storage = \Drupal::entityTypeManager()->getStorage('forcontu_entities_section');
  //dpm($section_storage);
  
  // Si hay secciones -> crear variables
  if (count($sections) > 0 ) {
    foreach ($sections as $section) {
      $st = $section_storage->load($section);
      // Crear el patrón de búsqueda
      $pattern = '/\/' . $section . '\/+/'; 
      if (preg_match($pattern, $uri)) {
        $variables['section_id'] = $st->id();
        $variables['section_color'] = $st->getColor();
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function forcontu_entities_theme() {
  $theme = [];
  $theme['forcontu_entities_message'] = [
    'render element' => 'elements',
    'file' => 'forcontu_entities_message.page.inc',
    'template' => 'forcontu_entities_message',
  ];
  $theme['forcontu_entities_message_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'forcontu_entities_message.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function forcontu_entities_theme_suggestions_forcontu_entities_message(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#forcontu_entities_message'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'forcontu_entities_message__' . $sanitized_view_mode;
  $suggestions[] = 'forcontu_entities_message__' . $entity->bundle();
  $suggestions[] = 'forcontu_entities_message__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'forcontu_entities_message__' . $entity->id();
  $suggestions[] = 'forcontu_entities_message__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
